MongoDB scaling out
Relational database increase in cost for increase in data in single server and expensive for joining multiple tables. 

clients make requests to app. app requests mongodb for operations. mongodb requests using mongo shell
mongo is shell. mongod is server.

db.names.insert({'name':'rahul'}) for inserting records in 'name' collection.
db.names.find() lists all the records in 'names' collection.


BSON - Binary JSON
Mongodb data is stored as BSON - same in application
BSON advantages: Lightweight, traverable, efficient

JSON doesnt support dates and couldnt differentiate integers or floating point numbers.
BSON eliminates these advantages. (bsonspec.org check more)
BSON adds a unique ID by default like objectId in the query below for insertOne.

CRUD operations:
use video (create namespace)
use video.movies (movies collection)

> db.movies.insertOne({"title":"suicide squad", "year":2016})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("57a6b2013dc327b12d07e641")
}

> db.movies.insertOne({"title":"jason bourne", "year":2016})      
{                                                                 
        "acknowledged" : true,                                    
        "insertedId" : ObjectId("57a6b2cf3dc327b12d07e642")       
}                                                                 
> db.movies.insertOne({"title":"star trek beyond", "year":2016})  
{                                                                 
        "acknowledged" : true,                                    
        "insertedId" : ObjectId("57a6b2e63dc327b12d07e643")       
}                                                                 


db.movies.find().pretty()


> db.movies.find({"title":"jason bourne"}).pretty()
{
        "_id" : ObjectId("57a6b2cf3dc327b12d07e642"),
        "title" : "jason bourne",
        "year" : 2016
}

var c = db.movies.find()

c.next()

c.next() returns next object in movies collection

c.hasNext() returns boolean 


Node JS 

express JS - layer on http, routing and includes details of http

 console.log ("hello world");

 var http = require('http');

 var server = http.createServer(function(request, response){
 	response.writeHead(200, {"Content-Type":"text/plain"})
	response.end("Hello, world\n");
	})

server.listen(8000);

console.log("server has started");









