MongoDB scaling out
Relational database increase in cost for increase in data in single server and expensive for joining multiple tables. 

clients make requests to app. app requests mongodb for operations. mongodb requests using mongo shell
mongo is shell. mongod is server.

db.names.insert({'name':'rahul'}) for inserting records in 'name' collection.
db.names.find() lists all the records in 'names' collection.


BSON - Binary JSON
Mongodb data is stored as BSON - same in application
BSON advantages: Lightweight, traverable, efficient

JSON doesnt support dates and couldnt differentiate integers or floating point numbers.
BSON eliminates these advantages. (bsonspec.org check more)
BSON adds a unique ID by default like objectId in the query below for insertOne.

CRUD operations:
use video (create namespace)
use video.movies (movies collection)

> db.movies.insertOne({"title":"suicide squad", "year":2016})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("57a6b2013dc327b12d07e641")
}

> db.movies.insertOne({"title":"jason bourne", "year":2016})      
{                                                                 
        "acknowledged" : true,                                    
        "insertedId" : ObjectId("57a6b2cf3dc327b12d07e642")       
}                                                                 
> db.movies.insertOne({"title":"star trek beyond", "year":2016})  
{                                                                 
        "acknowledged" : true,                                    
        "insertedId" : ObjectId("57a6b2e63dc327b12d07e643")       
}                                                                 


db.movies.find().pretty()


> db.movies.find({"title":"jason bourne"}).pretty()
{
        "_id" : ObjectId("57a6b2cf3dc327b12d07e642"),
        "title" : "jason bourne",
        "year" : 2016
}

var c = db.movies.find()

c.next()

c.next() returns next object in movies collection

c.hasNext() returns boolean 





Node JS 

express JS - layer on http, routing and includes details of http

 console.log ("hello world");

 var http = require('http');

 var server = http.createServer(function(request, response){
 	response.writeHead(200, {"Content-Type":"text/plain"})
	response.end("Hello, world\n");
	})

server.listen(8000);

console.log("server has started");





Node.js driver - interacts with mongod server using BSON. In this case, the node js driver is a javascript program responsible for opening sockets etc.


reads the documents title in movies collection
var MongoClient = require('mongodb').MongoClient,
	assert = require('assert');

MongoClient.connect('mongodb://localhost:27017/video', function(err, db){
	assert.equal(null, err);
	console.log("successful connected to server");

	db.collection('movies').find({}).toArray(function(err, docs){
		docs.forEach(function(doc){
			console.log(doc.title);
		});
		db.close();
	});
});



Express JS

var express = require('express'),
	app = express();

app.get('/', function(req, res){
	res.send('hello world');
})

app.use(function(req, res){
	res.sendStatus(404);
})

var server = app.listen(3000, function(){
	var port = server.address().port;
	console.log('express server listening on port %s', port);
})

app.use - this is the default route.





Templates
problem using express is sending a static response html to port 3000.
to avoid this use template library. (views for consolidate library)
<h1> hello {{name}} </h1>


var express = require('express'),
	app = express(),
	engines = require('consolidate');

app.engine('html', engines.nunjucks);
app.set('view engine', 'html');
app.set('views', __dirname + '/views');

app.get('/', function(req, res) {
	res.render('hello', { name:'templates'});
});

app.use(function(req, res){
	res.sendStatus(404);
});

var server = app.listen(3000, function(){
	var port = server.address().port;
	console.log('express server listening on port %s', port);
});







All together now

var express = require('express'),
    app = express(),
    engines = require('consolidate'),
    MongoClient = require('mongodb').MongoClient,
    assert = require('assert');

app.engine('html', engines.nunjucks);
app.set('view engine', 'html');
app.set('views', __dirname + '/views');

MongoClient.connect('mongodb://localhost:27017/video', function(err, db) {

    assert.equal(null, err);
    console.log("Successfully connected to MongoDB.");

    app.get('/', function(req, res){

        db.collection('movies').find({}).toArray(function(err, docs) {
            res.render('movies', { 'movies': docs } );
        });

    });

    app.use(function(req, res){
        res.sendStatus(404);
    });
    
    var server = app.listen(3000, function() {
        var port = server.address().port;
        console.log('Express server listening on port %s.', port);
    });

});


views/movies.html

<head>
<style>
body { font-family: 'Helvetica', 'Arial', sans-serif; }
</style>
</head>

<h1>Movies</h1>
{% for movie in movies %}
  <li><a href="http://www.imdb.com/title/{{ movie.imdb }}">{{ movie.title }}, {{ movie.year }}</a></li>
{% else %}
  <li>No movies found.</li>
{% endfor %}




In package.json - ~ in dependencies version means for example for 4.13.3 will not install 4.13.2 and also does not install 4.14



more of express GET
URL parameters
localhost:3000/name?getvar1=value1&getvar2=value2

var express = require('express'),
    app = express(),
    engines = require('consolidate');

app.engine('html', engines.nunjucks);
app.set('view engine', 'html');
app.set('views', __dirname + '/views');

// Handler for internal server errors
function errorHandler(err, req, res, next) {
    console.error(err.message);
    console.error(err.stack);
    res.status(500).render('error_template', { error: err });
}

app.get('/:name', function(req, res, next) {
    var name = req.params.name;
    var getvar1 = req.query.getvar1;
    var getvar2 = req.query.getvar2;
    res.render('hello', { name : name, getvar1 : getvar1, getvar2 : getvar2 });
});

app.use(errorHandler);

var server = app.listen(3000, function() {
    var port = server.address().port;
    console.log('Express server listening on port %s.', port);
});


views:
{{getvar1}} -- {{getvar2}}



Express post
uses bodyparser and error handler
next call back is a function send by express. used for error handling.
var express = require('express'),
    app = express(),
    engines = require('consolidate'),
    bodyParser = require('body-parser');

app.engine('html', engines.nunjucks);
app.set('view engine', 'html');
app.set('views', __dirname + '/views');
app.use(bodyParser.urlencoded({ extended: true })); 

// Handler for internal server errors
function errorHandler(err, req, res, next) {
    console.error(err.message);
    console.error(err.stack);
    res.status(500).render('error_template', { error: err });
}

app.use(errorhandler)

app.get('/', function(req, res, next) {
    res.render('fruitPicker', { 'fruits' : [ 'apple', 'orange', 'banana', 'peach' ] });
});

app.post('/favorite_fruit', function(req, res, next) {
    var favorite = req.body.fruit;
    if (typeof favorite == 'undefined') {
        next('Please choose a fruit!');
    }
    else {
        res.send("Your favorite fruit is " + favorite);
    }
});

app.use(errorHandler);

var server = app.listen(3000, function() {
    var port = server.address().port;
    console.log('Express server listening on port %s.', port);
});



views

<!doctype HTML>
<html>
  <head><title>Fruit Picker</title></head>
  <body>
     <form action="/favorite_fruit" method="POST">
        <p>What is your favorite fruit?</p>
        {% for fruit in fruits %}
          <p>
            <input type="radio" name="fruit" value="{{fruit}}"/>{{fruit}}
          </p>
        {% endfor %}
        <input type="submit" value="Submit"/>
     </form>
  </body>
</html>

error view
<h1>Error: {{error}}</h1>











